import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;

public class Goal {
    private String name;
    private Category category;
    private double balance;
    private double target;
    boolean isCompleted;
    private LocalDate endDate;
    private boolean notificationSent = false;
    private List<Deposit> deposits = new ArrayList<>();

    public Goal(String name, Category category, double target, double balance, LocalDate endDate) {
        this.name = name;
        this.target = target;
        this.category = category;
        this.endDate = endDate;
        this.balance = balance;
        this.isCompleted = balance >= target;
        category.addGoal(this);
    }

    public List<Deposit> getDeposits() {
        return deposits;
    }

    public void addDeposit(double amount, LocalDate date) {
        deposits.add(new Deposit(amount, date));
    }

    public void setBalance(double amount, LocalDate date) {
        this.balance += amount;
        deposits.add(new Deposit(amount, date));
        checkAndNotifyProgress();
    }

    public void checkAndNotifyProgress() {
        double progress = getProgressPercentage();
        if (progress >= 80 && !notificationSent) {
            System.out.println("\nüéâüéâüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¶–µ–ª—å '" + name + "' –¥–æ—Å—Ç–∏–≥–ª–∞ 80% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞! üéâüéâüéâ\n");
            notificationSent = true;
        }
        if (progress < 80) {
            notificationSent = false;
        }
    }

    public String getName() {
        return name;
    }

    public Category getCategory() {
        return category;
    }

    public LocalDate getEndDate() {
        return endDate;
    }

    public double getTarget() {
        return target;
    }

    public double getBalance() {
        return balance;
    }

    public double getProgressPercentage() {
        return (balance / target) * 100;
    }

    @Override
    public String toString() {
        return "\n–¶–µ–ª—å: " + name +
                "\n–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞: " + target +
                "\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: " + balance +
                "\n–ü—Ä–æ–≥—Ä–µ—Å—Å: " + String.format("%.2f%%", getProgressPercentage()) +
                "\n–°—Ç–∞—Ç—É—Å: " + (isCompleted ? "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" : "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞") +
                "\n–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: " + endDate;
    }

    public boolean needsReminder() {
        boolean reminderEnabled = true;
        if (!reminderEnabled) return false;
        LocalDate today = LocalDate.now();
        return today.isAfter(endDate.minusDays(10)) && today.isBefore(endDate);
    }

    public LocalDate predictCompletionDate() {
        if (balance >= target) return LocalDate.now();

        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
        if (deposits.isEmpty()) return null;

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
        List<LocalDate> depositDates = deposits.stream()
                .map(Deposit::getDate).sorted().toList();

        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–µ–ø–æ–∑–∏—Ç–æ–º
        long totalDays = ChronoUnit.DAYS.between(
                depositDates.getFirst(),
                depositDates.getLast());

        // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –≤ —Å—É–º–º–µ –±—ã–ª–æ –≤–ª–æ–∂–µ–Ω–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏
        double sum = deposits.stream()
                .mapToDouble(Deposit::getAmount).sum();

        // –ï—Å–ª–∏ –≤—Å–µ–≥–æ –æ–¥–∏–Ω –¥–µ–ø–æ–∑–∏—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
        if (totalDays == 0) return null;

        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –¥–µ–Ω—å
        double averageDailyDeposit = sum / (totalDays + 1);

        // –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —Å—É–º–º—É
        double remainingAmount = target - balance;

        // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        long predictedDays = Math.round(remainingAmount / averageDailyDeposit);

        return LocalDate.now().plusDays(predictedDays);
    }

    public String getPredictionInfo() {
        LocalDate predictedDate = predictCompletionDate();
        if (predictedDate == null) {
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞";
        }

        long daysLeft = ChronoUnit.DAYS.between(LocalDate.now(), predictedDate);
        return String.format(
                "–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: %s (—á–µ—Ä–µ–∑ %d –¥–Ω–µ–π)",
                predictedDate,
                daysLeft
        );
    }
}
